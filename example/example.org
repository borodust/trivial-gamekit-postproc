#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:lisp :results "output silent"
#+PROPERTY: header-args:glsl :results "none"
* trivial-gamekit-postproc Example

Example demonstrating how to use =trivial-gamekit-postproc= system.

** Preparations

Lets load all required systems for our example to work.

#+BEGIN_SRC lisp :eval yes
  (ql:quickload '(trivial-gamekit trivial-gamekit-postproc trivial-gamekit-postproc/blur))
#+END_SRC

Also lets define a package we will evaluate our code in.

#+BEGIN_SRC lisp :tangle example.lisp
  (cl:defpackage :trivial-gamekit.postproc.example
    (:use :cl)
    (:export #:run))
#+END_SRC

** The Code
#+BEGIN_SRC glsl :tangle example.glsl
  #version 330 core
  #pragma bodge: import gamekit/postproc

  //
  // Adapted from:
  // https://www.shadertoy.com/view/4sf3W8
  //

  void mainPostproc(out vec4 fragColor, in sampler2D image, in vec2 viewportSize) {
    vec3 c[9];
    for (int i = 0; i < 3; ++i) {
      for (int j = 0; j < 3; ++j) {
        c[3*i+j] = texture(image,
                           (gl_FragCoord.xy + vec2(i-1,j-1)) / viewportSize).rgb;
      }
    }

    vec3 Lx = 2.0*(c[7]-c[1]) + c[6] + c[8] - c[2] - c[0];
    vec3 Ly = 2.0*(c[3]-c[5]) + c[6] + c[0] - c[2] - c[8];
    vec3 G = sqrt(Lx*Lx+Ly*Ly);

    fragColor = vec4(G, 1.0);
  }
#+END_SRC

#+BEGIN_SRC lisp :tangle example.lisp
  (cl:in-package :trivial-gamekit.postproc.example)

  (defparameter *background* (gamekit:vec4 0.2 0.2 0.2 1))
  (defparameter *foreground* (gamekit:vec4 0.8 0.8 0.8 1))
  (defvar +origin+ (gamekit:vec2 0 0))

  (gamekit.postproc::define-postprocessing-pipeline
      (example-pipeline
       (:sources "example.glsl")
       (:base-path :system-relative :trivial-gamekit-postproc/example)))

  (gamekit:defgame postproc-example (gamekit.postproc:postproc)
    ()
    (:viewport-width 800)
    (:viewport-height 600)
    (:viewport-title "Post Processing Example")
    (:default-initargs :postproc-pipelines '(example-pipeline)))


  (defmethod gamekit:draw ((this postproc-example))
    (let* ((current-time (bodge-util:real-time-seconds))
           (x (+ (* (cos current-time) 100) (/ (gamekit:viewport-width) 2)))
           (y (+ (* (sin current-time) 100) (/ (gamekit:viewport-height) 2))))
      (gamekit:draw-rect +origin+
                         (gamekit:viewport-width) (gamekit:viewport-height)
                         :fill-paint *background*)
      (gamekit:draw-circle (gamekit:vec2 x y) 50 :fill-paint *foreground*)))

#+END_SRC

Next we define and export a function to run our example.
#+BEGIN_SRC lisp :tangle example.lisp
  (cl:in-package :trivial-gamekit.postproc.example)

  (defun run ()
    (gamekit:start 'postproc-example))
#+END_SRC

And run it!
#+BEGIN_SRC lisp :eval on
  (trivial-gamekit.postproc.example:run)
#+END_SRC
